// Переменные ширин экрана для миксина медивыражений
$breakpoints: (
	hg: 4800,
	lg: 1170,
	md: 750,
	sm: 320
) !default;
$media-direction: max !default;

// Вспомогательные функции-миксины для миксина media (для удобных медиавыражений)
@mixin css_property($property, $value) {
	@if type_of($value) == string {
		#{$property}: unquote($value);
	} @else {
		#{$property}: $value;
	}
}
@function splitScreens($string, $seperator) {
	$string: inspect(quote($string));
	$sepId: str-index(quote($string), $seperator);
	@if ($sepId) {
		$array: (quote(str-slice($string, 0, $sepId - 1)), quote(str-slice($string, $sepId + 1)));
		@return $array;
	} @else {
		@return $string;
	}
}

// Миксин для удобной записи стилей для медиавыражений (читай Readme.md)
@mixin media($properties, $orientation: false) {

	@each $property, $value in $properties {
		@if type_of($value) == 'map' {
			@each $screen, $val in $value {
				$screen: splitScreens($screen, '-');
				@if type_of($screen) == 'list' {
					$min_screen: nth($screen, 1);
					$max_screen: nth($screen, 2);
					@if $min_screen == min or $min_screen == max {
						$media-direction: $min_screen;
						@if $orientation {
							@if map-has-key($breakpoints, $max_screen) {
								@media only screen and (#{$media-direction}-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation) {
									@include css_property($property, $val);
								}
							} @else {
								@media only screen and (#{$media-direction}-width: $max_screen + 'px') and (orientation: $orientation) {
									@include css_property($property, $val);
								}
							}
						} @else {
							@if map-has-key($breakpoints, $max_screen) {
								@media only screen and (#{$media-direction}-width: map-get($breakpoints, $max_screen) + 'px') {
									@include css_property($property, $val);
								}
							} @else {
								@media only screen and (#{$media-direction}-width: $max_screen + 'px') {
									@include css_property($property, $val);
								}
							}
						}
					} @else {
						@if $orientation {
							@if map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
								@media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation) {
									@include css_property($property, $val);
								}
							} @else if map-has-key($breakpoints,  $min_screen) and not map-has-key($breakpoints,  $max_screen) {
								@media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: $max_screen + 'px') and (orientation: $orientation) {
									@include css_property($property, $val);
								}
							} @else if not map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
								@media only screen and (min-width: $min_screen + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') and (orientation: $orientation) {
									@include css_property($property, $val);
								}
							} @else {
								@media only screen and (min-width: $min_screen + 'px') and (max-width: $max_screen + 'px') and (orientation: $orientation) {
									@include css_property($property, $val);
								}
							}
						} @else {
							@if map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
								@media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') {
									@include css_property($property, $val);
								}
							} @else if map-has-key($breakpoints,  $min_screen) and not map-has-key($breakpoints,  $max_screen) {
								@media only screen and (min-width: map-get($breakpoints, $min_screen) + 'px') and (max-width: $max_screen + 'px') {
									@include css_property($property, $val);
								}
							} @else if not map-has-key($breakpoints,  $min_screen) and map-has-key($breakpoints,  $max_screen) {
								@media only screen and (min-width: $min_screen + 'px') and (max-width: map-get($breakpoints, $max_screen) + 'px') {
									@include css_property($property, $val);
								}
							} @else {
								@media only screen and (min-width: $min_screen + 'px') and (max-width: $max_screen + 'px') {
									@include css_property($property, $val);
								}
							}
						}
					}
				} @else {
					@if $screen == 'print' {
						@media print {
							@include css_property($property, $val);
						}
					} @else {
						@if $orientation {
							@if map-has-key($breakpoints, $screen) {
								@media only screen and (#{$media-direction}-width: map-get($breakpoints, $screen) + 'px') and (orientation: $orientation) {
									@include css_property($property, $val);
								}
							} @else {
								@if $screen == all {
									@media only screen and (orientation: $orientation) {
										@include css_property($property, $val);
									}
								} @else {
									@media only screen and (#{$media-direction}-width: $screen + 'px') and (orientation: $orientation) {
										@include css_property($property, $val);
									}
								}
							}
						} @else {
							@if map-has-key($breakpoints, $screen) {
								@media only screen and (#{$media-direction}-width: map-get($breakpoints, $screen) + 'px') {
									@include css_property($property, $val);
								}
							} @else {
								@if $screen == all {
									@include css_property($property, $val);
								} @else {
									@media only screen and (#{$media-direction}-width: $screen + 'px') {
										@include css_property($property, $val);
									}
								}
							}
						}
					}
				}
			}
		} @else {
			@if $property == 'extend' {
				@extend #{unquote($value)} !optional;
			} @else {
				@include css_property($property, $value);
			}
		}
	}
}

// Миксин для предотвращения схлопывания float-элементов
@mixin clearfix {
	&::after {
		content: "";
		display: table;
		clear: both;
	}
}

// Миксин для кроссбраузерной стилизации placeholder
@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

// Миксин для подчеркивания элемента с background-image, требует указания background-position
@mixin underline {
	background-image: linear-gradient(to right, rgba(40, 40, 40, 0.5), rgba(40, 40, 40, 0.5));
	background-size: 1px 1px;
	background-repeat: repeat-x;
	/*need background-position*/
}
